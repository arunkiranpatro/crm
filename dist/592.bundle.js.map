{"version":3,"sources":["webpack:///./src/components/PureComponents/FinancialRow.js","webpack:///./src/components/UILibrary/WidgetCard.js","webpack:///./src/components/ClassComponents/FinancialCard.js","webpack:///./src/store/actions/financialCardActions.js","webpack:///./src/components/PureComponents/TransactionLogRow.js","webpack:///./src/components/ClassComponents/TransactionLogCard.js","webpack:///./src/store/actions/txnCardActions.js","webpack:///./src/components/PureComponents/CCTransactionLogRow.js","webpack:///./src/components/ClassComponents/CCTransactionLogCard.js","webpack:///./src/store/actions/ccTxnCardActions.js","webpack:///./src/components/PureComponents/InteractionRow.js","webpack:///./src/components/ClassComponents/InteractionsCard.js","webpack:///./src/store/actions/interactionsActions.js","webpack:///./src/components/ClassComponents/LastAccountSnapshot.js","webpack:///./src/components/PureComponents/DashboardTab.js","webpack:////home/arun/Documents/git/crm/node_modules/moment/locale|sync|/[\\/\\\\](es-us(\\.js)"],"names":["FinancialRow","data","Layout","className","columns","FIName","FIType","CVFIStatus","Last4","propTypes","PropTypes","WidgetCard","heading","component","Component","list","isLoading","widgetClassName","widgetHeaderClassName","widgetBodyClassName","body","Loading","length","map","index","key","aria-label","FinancialCard","componentDidMount","this","props","getFinancials","render","financials","financeCard","connect","state","errors","dispatch","clearErrors","type","GET_FINANCE","payload","TransactionLogRow","txnAmtColorCls","GrossAmount","Amount","format","TransactionDate","CounterpartyName","Status","AmountCurrency","TransactionLogCard","getTransactions","txns","txncard","GET_TXNCARD","transactions","CCTransactionLogRow","TransAuthDate","FIDetails","IssueNumber","ActionDetails","Currency","CCTransactionLogCard","getCCTransactions","cctxnsCard","GET_CC_TXNS","cctransactions","InteractionRow","CreateDateTime","WorkStatus","ContactChannel","OwnerID","InteractionsCard","getInteractions","interactions","icasesCard","GET_INTERACTIONS","LatestAccountSnapshot","React","getAccountDetails","account","accountCard","label","LastTransactionAmount","Opportunity","PCR","LastLogin","LastAccountSnapshot","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports"],"mappings":"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","file":"592.bundle.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Layout from \"../UILibrary/Layout\";\n\nfunction FinancialRow({ data }) {\n  return (\n    <Layout className=\"widget-row\" columns={4}>\n      <>{data.FIName}</>\n      <>{data.FIType}</>\n      <>{data.CVFIStatus}</>\n      <>\n        xxxx-\n        {data.Last4}\n      </>\n    </Layout>\n  );\n}\nFinancialRow.propTypes = {\n  data: PropTypes.shape({\n    FIName: PropTypes.string,\n    FIType: PropTypes.string,\n    CVFIStatus: PropTypes.string,\n    Last4: PropTypes.string\n  })\n};\nexport default FinancialRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Loading from './Loading';\n\nconst WidgetCard = ({\n  className,\n  heading,\n  component: Component,\n  list,\n  isLoading,\n}) => {\n  const widgetClassName = `widget-card ${className}`;\n  const widgetHeaderClassName = `widget-header ${className}-header`;\n  const widgetBodyClassName = `widget-body ${className}-body`;\n  let body = 'No results found';\n  if (isLoading) {\n    body = <Loading />;\n  } else if (list.length > 0) {\n    body = list.map((data, index) => <Component data={data} key={index} />);\n  } else return null;\n  if (!Component) {\n    return null;\n  }\n  return (\n    <div className={widgetClassName}>\n      <h2 aria-label={heading} className={widgetHeaderClassName}>\n        {heading}\n      </h2>\n      <div className={widgetBodyClassName}>{body}</div>\n    </div>\n  );\n};\n\nWidgetCard.propTypes = {\n  className: PropTypes.string.isRequired,\n  heading: PropTypes.string.isRequired,\n  list: PropTypes.array.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  component: PropTypes.node.isRequired,\n};\n\nexport default WidgetCard;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport FinancialRow from \"../PureComponents/FinancialRow\";\nimport { getFinancials } from \"../../store/actions/financialCardActions\";\nimport WidgetCard from \"../UILibrary/WidgetCard\";\n\nclass FinancialCard extends Component {\n  componentDidMount() {\n    this.props.getFinancials();\n  }\n\n  render() {\n    const { financials, isLoading } = this.props.financeCard;\n    return (\n      <WidgetCard\n        className=\"finance-card\"\n        heading=\"Funding Instruments\"\n        list={financials}\n        isLoading={isLoading}\n        component={FinancialRow}\n      />\n    );\n  }\n}\nFinancialCard.propTypes = {\n  financeCard: PropTypes.shape({\n    financials: PropTypes.array,\n    isLoading: PropTypes.bool\n  }),\n  getFinancials: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  financeCard: state.financeCard,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, { getFinancials })(FinancialCard);\n","import { GET_FINANCE, SET_FINANCE_LOADING } from \"../constants\";\nimport clearErrors from \"./errorActions\";\nimport financials from \"../../mockdata/financials.json\";\n\nexport const getFinancials = () => dispatch => {\n  clearErrors();\n  dispatch({\n    type: GET_FINANCE,\n    payload: financials.pxResults\n  });\n};\n","import React from \"react\";\nimport Moment from \"react-moment\";\nimport PropTypes from \"prop-types\";\n\nimport Layout from \"../UILibrary/Layout\";\n\nfunction TransactionLogRow({ data }) {\n  const txnAmtColorCls = data.GrossAmount.Amount > 0 ? \"txn-green\" : \"txn-red\";\n  return (\n    <Layout className=\"widget-row\" columns={4}>\n      <Moment format=\"DD-MM-YYYY hh:mm a\">{data.TransactionDate}</Moment>\n      <>{data.CounterpartyName}</>\n      <>{data.Status}</>\n      <div className={txnAmtColorCls}>{data.GrossAmount.AmountCurrency}</div>\n    </Layout>\n  );\n}\nTransactionLogRow.propTypes = {\n  data: PropTypes.shape({\n    TransactionDate: PropTypes.string,\n    CounterpartyName: PropTypes.string,\n    Status: PropTypes.string,\n    GrossAmount: PropTypes.shape({\n      AmountCurrency: PropTypes.string,\n      Amount: PropTypes.string\n    })\n  })\n};\nexport default TransactionLogRow;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport TransactionLogRow from \"../PureComponents/TransactionLogRow\";\nimport { getTransactions } from \"../../store/actions/txnCardActions\";\nimport WidgetCard from \"../UILibrary/WidgetCard\";\n\nclass TransactionLogCard extends Component {\n  componentDidMount() {\n    this.props.getTransactions();\n  }\n\n  render() {\n    const { txns, isLoading } = this.props.txncard;\n    return (\n      <WidgetCard\n        className=\"transaction-card\"\n        heading=\"Transactions\"\n        list={txns}\n        isLoading={isLoading}\n        component={TransactionLogRow}\n      />\n    );\n  }\n}\nTransactionLogCard.propTypes = {\n  txncard: PropTypes.shape({\n    txns: PropTypes.array,\n    isLoading: PropTypes.bool\n  }),\n  getTransactions: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  txncard: state.txncard,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, { getTransactions })(\n  TransactionLogCard\n);\n","import { GET_TXNCARD, SET_TXNCARD_LOADING } from \"../constants\";\nimport clearErrors from \"./errorActions\";\nimport transactions from \"../../mockdata/transactions.json\";\n\nexport const getTransactions = () => dispatch => {\n  clearErrors();\n  dispatch({\n    type: GET_TXNCARD,\n    payload: transactions.pxResults\n  });\n};\n","import React from \"react\";\nimport Moment from \"react-moment\";\nimport PropTypes from \"prop-types\";\nimport Layout from \"../UILibrary/Layout\";\n\nfunction CCTransactionLogRow({ data }) {\n  return (\n    <Layout className=\"widget-row\" columns={4}>\n      <Moment format=\"DD-MM-YYYY hh:mm a\">{data.TransAuthDate}</Moment>\n      <>{`xxxx-${data.FIDetails.IssueNumber}`}</>\n      <>{data.ActionDetails}</>\n      <>{data.FIDetails.Currency}</>\n    </Layout>\n  );\n}\nCCTransactionLogRow.propTypes = {\n  data: PropTypes.shape({\n    TransAuthDate: PropTypes.string,\n    FIDetails: PropTypes.shape({\n      IssueNumber: PropTypes.string,\n      Currency: PropTypes.string\n    }),\n    ActionDetails: PropTypes.string\n  })\n};\nexport default CCTransactionLogRow;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport CCTransactionLogRow from \"../PureComponents/CCTransactionLogRow\";\nimport { getCCTransactions } from \"../../store/actions/ccTxnCardActions\";\nimport WidgetCard from \"../UILibrary/WidgetCard\";\n\nclass CCTransactionLogCard extends Component {\n  componentDidMount() {\n    this.props.getCCTransactions();\n  }\n\n  render() {\n    const { txns, isLoading } = this.props.cctxnsCard;\n    return (\n      <WidgetCard\n        className=\"cc-transactions-card\"\n        heading=\"Credit Card Transactions\"\n        list={txns}\n        isLoading={isLoading}\n        component={CCTransactionLogRow}\n      />\n    );\n  }\n}\n\nCCTransactionLogCard.propTypes = {\n  cctxnsCard: PropTypes.shape({\n    txns: PropTypes.array,\n    isLoading: PropTypes.bool\n  }),\n  getCCTransactions: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  cctxnsCard: state.cctxnsCard,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, { getCCTransactions })(\n  CCTransactionLogCard\n);\n","import { GET_CC_TXNS, SET_CC_TXNS_LOADING } from \"../constants\";\nimport clearErrors from \"./errorActions\";\nimport cctransactions from \"../../mockdata/CCtransactions.json\";\n\nexport const getCCTransactions = () => dispatch => {\n  clearErrors();\n  dispatch({\n    type: GET_CC_TXNS,\n    payload: cctransactions.pxResults\n  });\n};\n","import React from \"react\";\nimport Moment from \"react-moment\";\nimport PropTypes from \"prop-types\";\nimport Layout from \"../UILibrary/Layout\";\n\nfunction InteractionRow({ data }) {\n  return (\n    <Layout className=\"widget-row\" columns={4}>\n      <Moment format=\"DD-MM-YYYY hh:mm a\">{data.CreateDateTime}</Moment>\n      <>{data.WorkStatus}</>\n      <>{data.ContactChannel}</>\n      <>{data.OwnerID}</>\n    </Layout>\n  );\n}\nInteractionRow.propTypes = {\n  data: PropTypes.shape({\n    CreateDateTime: PropTypes.string,\n    WorkStatus: PropTypes.string,\n    ContactChannel: PropTypes.string,\n    OwnerID: PropTypes.string\n  })\n};\nexport default InteractionRow;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport InteractionRow from \"../PureComponents/InteractionRow\";\nimport { getInteractions } from \"../../store/actions/interactionsActions\";\nimport WidgetCard from \"../UILibrary/WidgetCard\";\n\nclass InteractionsCard extends Component {\n  componentDidMount() {\n    this.props.getInteractions();\n  }\n\n  render() {\n    const { interactions, isLoading } = this.props.icasesCard;\n    return (\n      <WidgetCard\n        className=\"interactions-card\"\n        heading=\"Interactions\"\n        list={interactions}\n        isLoading={isLoading}\n        component={InteractionRow}\n      />\n    );\n  }\n}\n\nInteractionsCard.propTypes = {\n  icasesCard: PropTypes.shape({\n    interactions: PropTypes.array,\n    isLoading: PropTypes.bool\n  }),\n  getInteractions: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  icasesCard: state.icasesCard,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, { getInteractions })(InteractionsCard);\n","import { GET_INTERACTIONS, SET_INTERACTIONS_LOADING } from \"../constants\";\nimport clearErrors from \"./errorActions\";\nimport interactions from \"../../mockdata/Interactions.json\";\n\nexport const getInteractions = () => dispatch => {\n  clearErrors();\n  dispatch({\n    type: GET_INTERACTIONS,\n    payload: interactions.pxResults\n  });\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Moment from \"react-moment\";\nimport Details from \"../UILibrary/ReadOnlyData\";\nimport Layout from \"../UILibrary/Layout\";\nimport { getAccountDetails } from \"../../store/actions/accountActions\";\n\nclass LatestAccountSnapshot extends React.Component {\n  componentDidMount() {\n    this.props.getAccountDetails();\n  }\n\n  render() {\n    const { account } = this.props.accountCard;\n    let body = \"No results found\";\n    if (account) {\n      body = (\n        <Layout columns={4} className=\"snapshot\">\n          <Details label=\"Last Transaction\" className=\"snapshot-card\">\n            <div>{account.LastTransactionAmount}</div>\n          </Details>\n          <Details label=\"Opportunity\" className=\"snapshot-card\">\n            <div>{account.Opportunity}</div>\n          </Details>\n          <Details label=\"Potential Call Reason\" className=\"snapshot-card\">\n            <div>{account.PCR}</div>\n          </Details>\n          <Details label=\"Last Login\" className=\"snapshot-card\">\n            <div>\n              <Moment format=\"DD-MM-YYYY hh:mm a\">{account.LastLogin}</Moment>\n            </div>\n          </Details>\n        </Layout>\n      );\n    } else {\n      return null;\n    }\n    return <>{body}</>;\n  }\n}\n\nLatestAccountSnapshot.propTypes = {\n  accountCard: PropTypes.shape({\n    account: PropTypes.any,\n    isLoading: PropTypes.bool\n  }),\n  getAccountDetails: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  accountCard: state.accountCard,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, { getAccountDetails })(\n  LatestAccountSnapshot\n);\n","import React from \"react\";\nimport FinancialCard from \"../ClassComponents/FinancialCard\";\nimport TransactionLogCard from \"../ClassComponents/TransactionLogCard\";\nimport CCTransactionLogCard from \"../ClassComponents/CCTransactionLogCard\";\nimport InteractionsCard from \"../ClassComponents/InteractionsCard\";\nimport Layout from \"../UILibrary/Layout\";\nimport LastAccountSnapshot from \"../ClassComponents/LastAccountSnapshot\";\n\nconst DashboardTab = () => (\n  <>\n    <LastAccountSnapshot />\n    <Layout columns={2} className=\"widgets\">\n      <TransactionLogCard />\n      <CCTransactionLogCard />\n      <FinancialCard />\n      <InteractionsCard />\n    </Layout>\n  </>\n);\n\nexport default DashboardTab;\n","var map = {\n\t\"./es-us\": 146,\n\t\"./es-us.js\": 146\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 682;"],"sourceRoot":""}