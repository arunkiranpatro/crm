{"version":3,"sources":["webpack:///./src/components/UILibrary/Table.js","webpack:///./src/components/UILibrary/TableColumn.js","webpack:///./src/components/UILibrary/TableRows.js","webpack:///./src/components/UILibrary/TableRow.js","webpack:///./src/components/UILibrary/TableColumns.js","webpack:///./src/components/ClassComponents/TransactionsList.js","webpack:///./src/store/actions/txnsListActions.js","webpack:///./src/components/PureComponents/TransactionsTab.js"],"names":["Table","props","onSort","column","data","sortColumn","direction","sortDirection","reverse","then","ArraySort","setSortColumn","setSortDirection","renderTableHeader","renderTableBody","useState","config","className","propTypes","PropTypes","TableColumn","onClick","ariaSort","sortIcon","rest","children","id","sortable","e","target","isRequired","TableRows","links","React","child","TableRow","TableColumns","Moment","TransactionsList","this","getTxnslist","txns","map","result","index","key","Suspense","fallback","Loading","format","TransactionDate","TransactionID","TransactionType","CounterpartyEmail","NetAmount","AmountCurrency","TransLogBalanceCurrency","txnslist","body","isLoading","length","bind","renderTablebody","connect","state","errors","dispatch","clearErrors","type","GET_TXNSLIST","payload"],"mappings":"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","file":"487.bundle.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Table = function(props) {\n  const { onSort = onSortDefault, renderTableHeader, renderTableBody } = props;\n  const [sortColumn, setSortColumn] = useState(props.sortColumn);\n  const [sortDirection, setSortDirection] = useState(props.sortDirection);\n\n  function onSortDefault(column) {\n    let { data } = props;\n    if (column === sortColumn) {\n      const direction = sortDirection === \"desc\" ? \"asc\" : \"desc\";\n      const reverse = direction === \"desc\";\n      import(\"array-sort\").then(ArraySort => {\n        data = ArraySort(data, column, { reverse });\n      });\n      setSortColumn(column);\n      setSortDirection(direction);\n    } else {\n      import(\"array-sort\").then(ArraySort => {\n        data = ArraySort(data, column, { reverse: true });\n      });\n      setSortColumn(column);\n      setSortDirection(\"desc\");\n    }\n  }\n\n  const config = {\n    onSort,\n    sortColumn,\n    sortDirection\n  };\n\n  return (\n    <table className=\"table-container\">\n      {renderTableHeader(config)}\n      <tbody>{renderTableBody(props.data)}</tbody>\n    </table>\n  );\n};\n\nTable.propTypes = {\n  sortColumn: PropTypes.string.isRequired,\n  sortDirection: PropTypes.string.isRequired,\n  renderTableBody: PropTypes.func.isRequired,\n  renderTableHeader: PropTypes.func.isRequired,\n  data: PropTypes.array.isRequired,\n  onSort: PropTypes.func\n};\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableColumn = props => {\n  const { children, id, onSort, sortable } = props;\n  let className = 'table-col';\n  let onClick;\n  let ariaSort;\n  let sortIcon;\n  let rest;\n  if (sortable) {\n    className = 'table-col' + ' sortable';\n    onClick = sortColumn;\n    props.sortColumn === id\n      ? props.sortDirection === 'desc'\n        ? ((sortIcon = '\\u2193'), (ariaSort = 'descending'))\n        : ((sortIcon = '\\u2191'), (ariaSort = 'ascending'))\n      : (sortIcon = '');\n  }\n  function sortColumn(e) {\n    onSort(e.target.id);\n  }\n  rest = {\n    className,\n    onClick,\n    'aria-sort': ariaSort,\n  };\n  return (\n    <th id={id} {...rest}>\n      {children}\n      {' '}\n      {sortIcon}\n    </th>\n  );\n};\nTableColumn.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  id: PropTypes.string.isRequired,\n  onSort: PropTypes.func,\n  sortable: PropTypes.bool,\n  sortColumn: PropTypes.string,\n  sortDirection: PropTypes.string,\n};\nexport default TableColumn;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableRows = props => {\n  const { children } = props;\n  const links = React.Children.map(children, child => React.cloneElement(child, {})\n  );\n\n  return <tr>{links}</tr>;\n};\nTableRows.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\nexport default TableRows;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableRow = props => {\n  const { children } = props;\n  return <td className=\"table-details\">{children}</td>;\n};\nTableRow.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\nexport default TableRow;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TableColumns = props => {\n  const { children, ...rest } = props;\n  const links = React.Children.map(children, child => React.cloneElement(child, { ...rest })\n  );\n  return (\n    <thead>\n      <tr>{links}</tr>\n    </thead>\n  );\n};\nTableColumns.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\nexport default TableColumns;\n","import React, { Suspense } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Loading from \"../UILibrary/Loading\";\nimport Table from \"../UILibrary/Table\";\nimport TableColumn from \"../UILibrary/TableColumn\";\nimport TableRows from \"../UILibrary/TableRows\";\nimport TableRow from \"../UILibrary/TableRow\";\n\nimport { getTxnslist } from \"../../store/actions/txnsListActions\";\nimport TableColumns from \"../UILibrary/TableColumns\";\n\nconst Moment = React.lazy(() => import(\"react-moment\"));\n\nclass TransactionsList extends React.Component {\n  componentDidMount() {\n    this.props.getTxnslist();\n  }\n\n  renderTablebody(txns) {\n    const childBody = txns.map((result, index) => (\n      <TableRows key={index}>\n        <TableRow>\n          <Suspense fallback={<Loading />}>\n            <Moment format=\"DD-MM-YYYY hh:mm a\">\n              {result.TransactionDate}\n            </Moment>\n          </Suspense>\n        </TableRow>\n        <TableRow>{result.TransactionID}</TableRow>\n        <TableRow>{result.TransactionType}</TableRow>\n        <TableRow>{result.CounterpartyEmail}</TableRow>\n        <TableRow>{result.NetAmount.AmountCurrency}</TableRow>\n        <TableRow>{result.TransLogBalanceCurrency}</TableRow>\n      </TableRows>\n    ));\n    return childBody;\n  }\n\n  renderTableHeader(props) {\n    return (\n      <TableColumns {...props}>\n        <TableColumn id=\"TransactionDate\" sortable>\n          Transaction Date\n        </TableColumn>\n        <TableColumn id=\"TransactionID\" sortable>\n          Transaction ID\n        </TableColumn>\n        <TableColumn id=\"TransactionType\" sortable>\n          Transaction Type\n        </TableColumn>\n        <TableColumn id=\"CounterpartyEmail\">Counter Party Email</TableColumn>\n        <TableColumn id=\"NetAmount.Amount\" sortable>\n          Net Amount\n        </TableColumn>\n        <TableColumn id=\"TransLogBalanceCurrency\">Net Balance</TableColumn>\n      </TableColumns>\n    );\n  }\n\n  render() {\n    const { txns, isLoading } = this.props.txnslist;\n    let body = \"No results found\";\n    if (isLoading) {\n      body = <Loading />;\n    } else if (txns.length > 0) {\n      body = (\n        <Table\n          data={txns}\n          renderTableHeader={this.renderTableHeader.bind(this)}\n          renderTableBody={this.renderTablebody.bind(this)}\n          sortColumn=\"TransactionDate\"\n          sortDirection=\"desc\"\n        />\n      );\n    }\n    return <>{body}</>;\n  }\n}\nTransactionsList.propTypes = {\n  txnslist: PropTypes.shape({\n    txns: PropTypes.array,\n    isLoading: PropTypes.bool\n  }),\n  getTxnslist: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  txnslist: state.txnslist,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, { getTxnslist })(TransactionsList);\n","import { GET_TXNSLIST, SET_TXNLIST_LOADING } from \"../constants\";\nimport clearErrors from \"./errorActions\";\n\nimport txns from \"../../mockdata/TxnsLog.json\";\n\nexport const getTxnslist = () => dispatch => {\n  clearErrors();\n  dispatch({\n    type: GET_TXNSLIST,\n    payload: txns.pxResults\n  });\n};\n","import React from \"react\";\nimport TransactionTable from \"../ClassComponents/TransactionsList\";\n\nconst TransactionTab = () => (\n  <>\n    <TransactionTable />\n  </>\n);\n\nexport default TransactionTab;\n"],"sourceRoot":""}